perfect_squares <- numbers[perfect]
?as.Date
spring_break <- as.Date(2020-03-21)
spring_break <- as.Date(2020-03-21)
spring_break <- as.Date(2020-03-21, origin)
spring_break <- as.Date("2020-03-21")
spring_break <- as.Date("2020-03-21")
class(spring_break)
today <- Sys.Date()
days_to_break <- difftime(spring_break, today, units = days)
days_to_break <- difftime(spring_break, today, units = "days")
days_to_break <- difftime(spring_break, today)
days_to_break)
print(paste("Time difference between the firstday of spring break and today is",
days_to_break))
days_to_break <- difftime(spring_break, today, units = 'days')
print(paste('Time difference between the firstday of spring break and today is',
days_to_break))
print(paste('Time difference between the firstday of spring break and today is',
days_to_break, 'days!'))
?substr
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
date_as_string <- as.character(date)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- as.Date(paste(year, month_and_day))
return(new_date)
}
spring_break_2025 <- change_year(spring_break, 2025)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- charToDate(paste(year, month_and_day))
return(new_date)
}
spring_break_2025 <- change_year(spring_break, 2025)
new_date <- paste(year, month_and_day)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- paste(year, month_and_day)
return(new_date)
}
View(change_year)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- paste(year, month_and_day)
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
spring_break_2025 <- change_year(spring_break, 2025)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- paste(year, month_and_day)
return(new_date)
}
spring_break_2025 <- change_year(spring_break, 2025)
spring_break_2025 <- change_year(spring_break, 2025)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- paste(year, month_and_day)
return(new_date)
}
spring_break_2025 <- change_year(spring_break, 2025)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = '')
return(new_date)
}
spring_break_2025 <- change_year(spring_break, 2025)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = '')
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date_as_string <- paste(year, month_and_day, sep = '')
new_date <- as.Date(new_date_as_string)
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
date_has_passed <- function(date){
return(difftime(date, Sys.Date()) > 0)
}
date_has_passed <- function(date, ignore_year){
if(missing(ignore_year)|ignore_year == FALSE) {
return(difftime(date, Sys.Date()) > 0)
} else {
this_year <- substr(as.character(Sys.Date(), 1, 4))
date_in_this_year <- change_year(date, this_year)
return(difftime(date_in_this_year, Sys.Date()) > 0)
}
}
date_has_passed <- function(date, ignore_year){
if(missing(ignore_year) | ignore_year == FALSE) {
return(difftime(date, Sys.Date()) > 0)
} else {
this_year <- substr(as.character(Sys.Date(), 1, 4))
date_in_this_year <- change_year(date, this_year)
return(difftime(date_in_this_year, Sys.Date()) > 0)
}
}
date_has_passed('2020-01-23')
date_has_passed <- function(date, ignore_year == FALSE){
if(missing(ignore_year)) {
return(difftime(date, Sys.Date()) > 0)
} else {
this_year <- substr(as.character(Sys.Date(), 1, 4))
date_in_this_year <- change_year(date, this_year)
return(difftime(date_in_this_year, Sys.Date()) > 0)
}
}
date_has_passed <- function(date, ignore_year = FALSE){
if(missing(ignore_year)) {
return(difftime(date, Sys.Date()) > 0)
} else {
this_year <- substr(as.character(Sys.Date(), 1, 4))
date_in_this_year <- change_year(date, this_year)
return(difftime(date_in_this_year, Sys.Date()) > 0)
}
}
date_has_passed('2020-01-23')
date_has_passed('2020-01-23')
date_has_passed <- function(date, ignore_year = FALSE){
if(missing(ignore_year)) {
return(difftime(date, Sys.Date()) > 0)
} else {
this_year <- substr(as.character(Sys.Date(), 1, 4))
date_in_this_year <- change_year(date, this_year)
return(difftime(date_in_this_year, Sys.Date()) < 0)
}
}
date_has_passed('2020-01-23')
}
date_has_passed <- function(date, ignore_year = FALSE){
if(missing(ignore_year)) {
return(difftime(Sys.Date(), date) > 0)
} else {
this_year <- substr(as.character(Sys.Date(), 1, 4))
date_in_this_year <- change_year(date, this_year)
return(difftime(Sys.Date(), date_in_this_year) > 0)
}
}
date_has_passed('2020-01-23')
print(paste('Time difference between the firstday of spring break and today is',
days_to_break, 'days!'))
date_has_passed(as.Date('2020-01-23'))
date_has_passed(as.Date('2020-01-16'))
date_has_passed(as.Date('2020-01-23'))
birthday <- c(as.Date('1999-01-16'), as.Date('1968-03-11'), as.Date('1964-06-15'))
View(date_has_passed)
birthday <- list(Alex = as.Date('1999-01-16'), Qian = as.Date('1964-06-15')
, Wen = as.Date('1968-03-11'))
View(birthday)
get_next_birthday <- function(date){
birthday_2020 <- change_year(date, 2020)
if(date_has_passed(birthday_2020) = TRUE) {
return(change_year(birthday_2020, 2021))
} else {
return(birthday_2020)
}
}
get_next_birthday <- function(date){
birthday_2020 <- change_year(date, 2020)
if(date_has_passed(birthday_2020) == TRUE) {
return(change_year(birthday_2020, 2021))
} else {
return(birthday_2020)
}
}
birthdays <- list(Alex = as.Date('1999-01-16'), Qian = as.Date('1964-06-15')
, Wen = as.Date('1968-03-11'))
spring_break <- as.Date('2020-03-21')
source('~/Documents/GitHub/a2-core-skills-756558719/assignment.R', echo=TRUE)
spring_break <- as.Date('2020-03-21')
class(spring_break)
today <- Sys.Date()
print(paste('Time difference between the firstday of spring break and today is',
days_to_break, 'days!'))
days_to_break <- difftime(spring_break, today, units = 'days')
print(paste('Time difference between the firstday of spring break and today is',
days_to_break, 'days!'))
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date_as_string <- paste(year, month_and_day, sep = '')
new_date <- as.Date(new_date_as_string)
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
date_has_passed <- function(date, ignore_year = FALSE){
if(missing(ignore_year)) {
return(difftime(Sys.Date(), date) > 0)
} else {
this_year <- substr(as.character(Sys.Date(), 1, 4))
date_in_this_year <- change_year(date, this_year)
return(difftime(Sys.Date(), date_in_this_year) > 0)
}
}
date_has_passed(as.Date('2020-01-23'))
birthdays <- list(Alex = as.Date('1999-01-16'), Qian = as.Date('1964-06-15')
, Wen = as.Date('1968-03-11'))
get_next_birthday <- function(date){
birthday_2020 <- change_year(date, 2020)
if(date_has_passed(birthday_2020) == TRUE) {
return(change_year(birthday_2020, 2021))
} else {
return(birthday_2020)
}
}
get_next_birthday(birthdays)
get_next_birthday(birthdays$Alex)
lapply(birthdays, get_next_birthday)
next_birthdays <- list(lapply(birthdays, get_next_birthday))
print(next_birthdays)
date_has_passed('1999-01-22')
date_has_passed('1999-01-22', TRUE)
date_has_passed('1999-01-22', TRUE)
date_has_passed('1999-01-22', TRUE)
# Check if the date has passed. Takes in a date, return true if the date has
# passed. Optional argument ignore_year defult to FALSE, when passed in TRUE
# check whether the date has passed this year.
date_has_passed <- function(date, ignore_year = FALSE){
if(ignore_year = TRUE) {
this_year <- substr(as.character(Sys.Date(), 1, 4))
date_in_this_year <- change_year(date, this_year)
return(difftime(Sys.Date(), date_in_this_year) > 0)
} else {
return(difftime(Sys.Date(), date) > 0)
}
}
date_has_passed(as.Date('2020-01-23'))
# Check if the date has passed. Takes in a date, return true if the date has
# passed. Optional argument ignore_year defult to FALSE, when passed in TRUE
# check whether the date has passed this year.
date_has_passed <- function(date, ignore_year = FALSE){
if(ignore_year == TRUE) {
this_year <- substr(as.character(Sys.Date(), 1, 4))
date_in_this_year <- change_year(date, this_year)
return(difftime(Sys.Date(), date_in_this_year) > 0)
} else {
return(difftime(Sys.Date(), date) > 0)
}
}
date_has_passed('1999-01-22', TRUE)
date_has_passed(as.Date('2020-01-23'))
next_birthdays <- list(lapply(birthdays, get_next_birthday))
print(next_birthdays)
# Check if the date has passed. Takes in a date, return true if the date has
# passed. Optional argument ignore_year defult to FALSE, when passed in TRUE
# check whether the date has passed this year.
date_has_passed <- function(date, ignore_year = FALSE){
if(ignore_year == TRUE) {
date_in_this_year <- change_year(date, 2020)
return(difftime(Sys.Date(), date_in_this_year) > 0)
} else {
return(difftime(Sys.Date(), date) > 0)
}
}
date_has_passed('1999-01-22', TRUE)
source('~/Documents/GitHub/book-exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c('coffee', 'bread')
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c('coffee', 'panini')
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c('pork', 'rice')
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[['lunch']]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meal[c('breakfast', 'lunch')]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c('breakfast', 'lunch')]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num_items <- lapply(meals, length)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, "Goblin")
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
updated_sharks <- c(Sharks, Goblin)
updated_sharks <- c(sharks, Goblin)
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
shark_length[4]
shark_length[-4]
shark_length[4]
is.list(shark_length)
shark_length[[4]]
is.list(shark_length)
shark_length[[4]]
is.list(shark_length)
shark_length$goblin
is.list(shark_length)
shark_length[4]
is.vector(shark_length)
shark_length[4]
is.vector(shark_length)
is.list(shark_length)
is.list(shark_length[4])
is.list(shark_length[[4]])
shark_length[[4]]
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * (1 - discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (1 + sales_tax)
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes <- [earthquakes > 6.5]
earthquakes <- earthquakes > 6.5
earthquakes[earthquakes > 6.5]
earthquakes[earthquakes > 6.5]
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes[earthquakes > 6.5]
shark_length[4]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
shark_length[4]
shark_length[[4]]
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste0('Employee', c(1:100)))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste('Employee', c(1:100)))
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary <- runif(100, 40000, 50000)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste('Employee', c(1:100)))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary <- runif(100, 40000, 50000)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste('Employee', c(1:100))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste('Employee', c(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_in_2018 <- c(salary + adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- adjustments > 0
# What was the 2018 salary of Employee 57
salaries[57, 'salary_in_2018']
?length()
# How many employees got a raise?
length(salaries[got_raise == TRUE])
# How many employees got a raise?
length(salaries[salaries$got_raise == TRUE])
# How many employees got a raise?
length(salaries[salaries$got_raise == TRUE, ])
View(salaries)
# How many employees got a raise?
salaries[salaries$got_raise == TRUE, ]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
?max
# What was the dollar value of the highest raise?
max(salaries$adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == 9921.301, "employees"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
min(salaries$adjustments)
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), 'employees']
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), 'employees']
# What was the average salary change?
mean(salaries$adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$got_raise == FALSE, 'adjustments'])
# Write a .csv file of your salary data to your working directory
write.csv(salaries, 'salaries.csv', row.names = FALSE)
getwd()
ls
setwd("~/Documents/GitHub/book-exercises/chapter-10-exercises/exercise-2")
# Write a .csv file of your salary data to your working directory
write.csv(salaries, 'salaries.csv', row.names = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
?read.csv
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
gants <- read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
gants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
setwd("~/Documents/GitHub/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
gants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Use the View function to look at the loaded data
View('grants')
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View('grants')
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), 'organization']
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), 'organization']
# How many grants were awarded in 2010?
nrow(grants)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste('Employee', c(1:100))
print(employees)
