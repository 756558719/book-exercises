# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy),]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worse_hwy <- two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy),]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy),]
worst_hwy$id
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy), id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy), id]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy), id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy), 'id']
View(worst_hwy)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy), 'id']
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice){
efficient <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice]
return(efficient$modle)
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice){
return(vehicles[vehicles$year == year_choice & vehicles$make == make_choice, 'modle'])
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice){
return(vehicles[vehicles$year == year_choice & vehicles$make == make_choice, 'model'])
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice){
return(vehicles[vehicles$year == year_choice & vehicles$make == make_choice & vehicles$hwy == max(vehicles$hwy), 'model'])
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice){
return(vehicles[vehicles$year == year_choice & vehicles$make == make_choice & vehicles$hwy == max(vehicles$hwy), 'model'])
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, 'Honda')
View(most_efficient)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice){
models <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
return(models[models$hwy == max(models$hwy), 'model'])
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, 'Honda')
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
library(dplyr)
?distinct
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, 'make')
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
length(distinct(vehicles, make))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
length(distinct(makes, make))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makes, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(makes, make))
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(vehicles_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(vehicles_1997, average = (cty + hwy) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicle_2wd <- filter(vehicles, drive == '2-Wheel Drive')
View(vehicle_2wd)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles_2wd, hwy == min(vehicle_2wd$hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicle_2wd, hwy == min(vehicle_2wd$hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicle_2wd, hwy == min(vehicle_2wd$hwy)), id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice){
models <- filter(vehicles, year == year_choice, make == make_choice)
return(select(models, model))
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, Honda)
# What was the most efficient Honda model of 1995?
most_efficient(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice){
models <- filter(vehicles, year == year_choice, make == make_choice)
return(select(filter(models, hwy == max(models$hwy)), model))
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, 'Honda')
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)
??flights
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
# install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(
flights,
delayed_in_air = arr_delay - dep_delay
)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(
flights,
delayed_in_air = arr_delay - dep_delay
)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
View(flights)
library(dplyr)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
# install.packages("nycflights13")
library(nycflights13)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air), na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
View(to_sea)
to_sea <- select(to_sea, origin, dest, delay_in_air)
to_sea <- select(to_sea, origin, dest, delayed_in_air)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg = mean(delayed_in_air, na.rm = TRUE))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
filter(dest == "SEA") %>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
filter(dest == "SEA") %>%
summarize(mean(delayed_in_air, na.rm = TRUE))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
filter(dest == "SEA") %>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE)) %>%
pull(avg_delayed)
setwd("~/Documents/GitHub/book-exercises/chapter-18-exercises/exercise-1")
source('~/Documents/GitHub/book-exercises/chapter-18-exercises/exercise-1/exercise.R', echo=TRUE)
View(param_list)
View(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- data$results
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data$results)
View(reviews)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
?diamonds
setwd("~/Documents/GitHub/book-exercises/chapter-16-exercises/exercise-1")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
View(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(x = carat, y = price)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(x = "carat", y = "price")
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = "carat", y = "price"))
View(diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cuts, fill = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price, y = cut, fill = clarity))
## Position Adjustments
diamonds_sample <- sample_n(diamonds, 1000)
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = price, y = cut, fill = clarity))
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample) +
geom_boxplot(x = color, y = price)
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds_sample) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_y_log10() +
scale_x_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_color_brewer("GnBu")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_color_brewer(pallete = "GnBu")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_color_brewer(palete = "GnBu")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_color_brewer(palette = "GnBu")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_color_brewer(palette = "GnBu")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_color_brewer(palette = "PuBuGn")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "PuBuGn")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "PuBuGn")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "PuBuGn", direction = -1)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~color)
